import random 
import time
import re

def encrypt(key, message):
    key = key.upper()
    shifts = []
    for i in key:
        shifts.append(ord(i) - 65)

    key_index = 0
    message_index = 0
    encrypted = ""
    message = message.upper().replace(",", "")
    while (message_index < len(message)):
        if message[message_index].isdigit():
            pt_char = ord(message[message_index]) - 48
            encrypted_char = (pt_char + shifts[key_index]) % 10
            encrypted += chr(encrypted_char + 48)
        else:
            pt_char = ord(message[message_index]) - 65
            encrypted_char = (pt_char + shifts[key_index]) % 26
            encrypted += chr(encrypted_char + 65)

        message_index += 1
        key_index = (key_index + 1) % len(key)

    return encrypted

def decrypt(key, encrypted_message):
    shifts = []
    key = key.upper()
    for i in key:
        shifts.append(ord(i) - 65)

    key_index = 0
    ct_index = 0
    decrypted = ""
    ct = encrypted_message.upper()
    while (ct_index < len(ct)):
        if ct[ct_index].isdigit():
            ct_char = ord(ct[ct_index]) - 48
            pt_char = (ct_char - shifts[key_index]) % 10
            if pt_char < 0:
                pt_char += 10
            decrypted += chr(pt_char + 48)
        else:
            ct_char = ord(ct[ct_index]) - 65
            pt_char = (ct_char - shifts[key_index])
            if pt_char < 0:
                pt_char += 26
            decrypted += chr(pt_char + 65)

        ct_index += 1
        key_index = (key_index + 1) % len(key)

    return decrypted

def keyGeneration():
    length = 6
    key = ""
    for _ in range(length):
        key += chr(random.randint(0, 25) + 65)
    return key

# enc = encrypt("Alex", "this is a test message")
# print(decrypt("Alex", enc))

# Setup:
AliceServerKey = keyGeneration()
BobServerKey = keyGeneration()

# Alice sends to server: Alice, Message containing Timestamp of message gen (by alice), Bob identity, and Key for Alice/Bob (generated by alice)(encrypted using Server/Alice key)

print("Alice: I want to message Bob. Let me create a key to send to Bob")

ProposedAliceBobKey = keyGeneration()
AliceServerMessage = f"{time.strftime('%H%M%S', time.localtime(time.time()))},Bob,{ProposedAliceBobKey}"

print(AliceServerKey)
print(AliceServerMessage)
AliceServerEncrypted = encrypt(AliceServerKey, AliceServerMessage)
print(f"Alice -> Server: Please send this message to Bob so we can establish secure communictaion: {AliceServerEncrypted}")

print(f"Server: Sure. I just need to decrypt and send to Bob, and verify the time stamp")

AliceServerDecrypted = decrypt(AliceServerKey, AliceServerEncrypted)
AliceServerDecrypted = re.split('(BOB)', AliceServerDecrypted)

print(AliceServerDecrypted)
print("Server: the timestamp is very recent and valid, so I will accept this time stamp and forward the info to Bob")

ServerBobMessage = f"{time.strftime('%H%M%S', time.localtime(time.time()))},Alice,{AliceServerDecrypted[2]}"
ServerBobMessageEncrypted = encrypt(BobServerKey, ServerBobMessage)
print (f"Server -> Bob: I have this message for you: {ServerBobMessageEncrypted}")

print("Bob: Thanks Server, I will decrypt this using our symmetric key")
ServerBobMessageDecrypted = decrypt(BobServerKey, ServerBobMessageEncrypted)
ServerBobMessageDecrypted = re.split("(ALICE)", ServerBobMessageDecrypted)
print(ServerBobMessageDecrypted)

print("Bob: It looks like Alice is trying to send a symmetric key to communicate")
print("Bob: The timestamp on this message is very recent and valid, so I will accept this message and assume it is not a replay attack. Therefore I can use this key")

print("Bob: Let me message Alice using this key")

BobAliceMessage = "HiAliceItsBobHowAreYou"
BobAliceMessageEncrypted = encrypt(ServerBobMessageDecrypted[2], BobAliceMessage)

print("Bob -> Alice: Sending message using key I recieved")

BobAliceMessageDecrypted = decrypt(ProposedAliceBobKey, BobAliceMessageEncrypted)
print(f"Alice: I received this message from Bob with the key I proposed: {BobAliceMessageDecrypted}")


